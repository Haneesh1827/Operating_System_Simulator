
#include"animations.hpp"



void main_animation() {
    for (int i = 0; i < 20; i ++) printf("\n"); // jump to bottom of console
    
    cout << BOLDCYAN "░█████╗░░██████╗  ░██████╗██╗███╗░░░███╗██╗░░░██╗██╗░░░░░░█████╗░████████╗░█████╗░██████╗░\n██╔══██╗██╔════╝  ██╔════╝██║████╗░████║██║░░░██║██║░░░░░██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗\n██║░░██║╚█████╗░  ╚█████╗░██║██╔████╔██║██║░░░██║██║░░░░░███████║░░░██║░░░██║░░██║██████╔╝\n██║░░██║░╚═══██╗  ░╚═══██╗██║██║╚██╔╝██║██║░░░██║██║░░░░░██╔══██║░░░██║░░░██║░░██║██╔══██╗\n╚█████╔╝██████╔╝  ██████╔╝██║██║░╚═╝░██║╚██████╔╝███████╗██║░░██║░░░██║░░░╚█████╔╝██║░░██║\n░╚════╝░╚═════╝░  ╚═════╝░╚═╝╚═╝░░░░░╚═╝░╚═════╝░╚══════╝╚═╝░░╚═╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝";
    cout <<RESET;
    
    long int j=1 <<16;
    for (size_t i = 0; i < 10; i++)
    {
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    
    
}

void print_main_menu(){
    long int j=1 <<16;
    for (size_t i = 0; i < 6; i++)
    {
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    cout << " \n" BOLDGREEN "Choose Algorithm to simulate" RESET << endl <<endl;
    cout << BOLDWHITE;
    cout << " 1. Process Scheduling" << endl;
    cout << " 2. Memory Management" << endl;
    cout << " 3. Process Syncronization" << endl;
    cout << " 4. Disk Scheduling" << endl;

    cout << " 9. Exit\n\n\n";
 
    cout << BOLDGREEN "Enter your choice : " << RESET;
    
}

void process_sched_animation(){
    long int j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    cout << BOLDCYAN;
    cout << "██████╗ ██████╗  █████╗  █████╗ ███████╗ ██████╗ ██████╗" << endl;
    cout << "██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝" << endl;
    cout << "██████╔╝██████╔╝██║  ██║██║  ╚═╝█████╗  ╚█████╗ ╚█████╗" << endl;
    cout << "██╔═══╝ ██╔══██╗██║  ██║██║  ██╗██╔══╝   ╚═══██╗ ╚═══██╗" << endl;
    cout << "██║     ██   ██║╚█████╔╝╚█████╔╝███████╗██████╔╝██████╔╝" << endl;
    cout << "╚═╝     ╚═╝  ╚═╝ ╚════╝  ╚════  ╚══════╝╚═════╝ ╚═════╝" << endl;
    cout << endl;
    cout << " ██████╗ █████╗ ██╗  ██╗███████╗██████╗ ██╗   ██╗██╗     ██╗███╗  ██╗ ██████╗" << endl;
    cout << "██╔════╝██╔══██╗██║  ██║██╔════╝██╔══██╗██║   ██║██║     ██║████╗ ██║██╔════╝" << endl;
    cout << "╚█████╗ ██║  ╚═╝███████║█████╗  ██║  ██║██║   ██║██║     ██║██╔██╗██║██║  ███╗" << endl;
    cout << " ╚═══██╗██║  ██╗██╔══██║██╔══╝  ██║  ██║██║   ██║██║     ██║██║╚████║██║  ╚██╗" << endl;
    cout << "██████╔╝╚█████╔╝██║  ██║███████╗██████╔╝╚██████╔╝███████╗██║██║ ╚███║╚██████╔╝" << endl;
    cout << "╚═════╝  ╚════╝ ╚═╝  ╚═╝╚══════╝╚═════╝  ╚═════╝ ╚══════╝╚═╝╚═╝  ╚══╝ ╚═════╝" << endl;
    cout << RESET;
    j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    
}
void mem_animations(){
    long int j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    cout << BOLDCYAN;
    cout << "███╗   ███╗███████╗███╗   ███╗ █████╗ ██████╗ ██╗   ██╗" << endl;
    cout << "████╗ ████║██╔════╝████╗ ████║██╔══██╗██╔══██╗╚██╗ ██╔╝" << endl;
    cout << "██╔████╔██║█████╗  ██╔████╔██║██║  ██║██████╔╝ ╚████╔╝" << endl;
    cout << "██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║  ██║██╔══██╗  ╚██╔╝" << endl;
    cout << "██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚█████╔╝██║  ██║   ██║" << endl;
    cout << "╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚════╝ ╚═╝  ╚═╝   ╚═╝" << endl;
    cout << endl;
    cout << "███╗   ███╗ █████╗ ███╗  ██╗ █████╗  ██████╗ ███████╗███╗   ███╗███████╗███╗  ██╗████████╗" << endl;
    cout << "████╗ ████║██╔══██╗████╗ ██║██╔══██╗██╔════╝ ██╔════╝████╗ ████║██╔════╝████╗ ██║╚══██╔══╝" << endl;
    cout << "██╔████╔██║███████║██╔██╗██║███████║██║  ██╗ █████╗  ██╔████╔██║█████╗  ██╔██╗██║   ██║  " << endl;
    cout << "██║╚██╔╝██║██╔══██║██║╚████║██╔══██║██║  ╚██╗██╔══╝  ██║╚██╔╝██║██╔══╝  ██║╚████║   ██║  " << endl;
    cout << "██║ ╚═╝ ██║██║  ██║██║ ╚███║██║  ██║╚██████╔╝███████╗██║ ╚═╝ ██║███████╗██║ ╚███║   ██║  " << endl;
    cout << "╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚══╝   ╚═╝  " << endl;
    cout << RESET;
    j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    
}
void sync_animations(){
    long int j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    cout << BOLDCYAN;
    cout << "██████╗ ██████╗  █████╗  █████╗ ███████╗ ██████╗ ██████╗" << endl;
    cout << "██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝" << endl;
    cout << "██████╔╝██████╔╝██║  ██║██║  ╚═╝█████╗  ╚█████╗ ╚█████╗" << endl;
    cout << "██╔═══╝ ██╔══██╗██║  ██║██║  ██╗██╔══╝   ╚═══██╗ ╚═══██╗" << endl;
    cout << "██║     ██   ██║╚█████╔╝╚█████╔╝███████╗██████╔╝██████╔╝" << endl;
    cout << "╚═╝     ╚═╝  ╚═╝ ╚════╝  ╚════  ╚══════╝╚═════╝ ╚═════╝" << endl;
    cout << endl;
    cout << " ██████╗██╗   ██╗ █████╗ ██████╗  █████╗ ███╗  ██╗██╗ ██████╗ █████╗ ████████╗██╗ █████╗ ███╗  ██╗" << endl;
    cout << "██╔════╝╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗████╗ ██║██║██╔════╝██╔══██╗╚══██╔══╝██║██╔══██╗████╗ ██║" << endl;
    cout << "╚█████╗  ╚████╔╝ ██║  ╚═╝██████╔╝██║  ██║██╔██╗██║██║╚█████╗ ███████║   ██║   ██║██║  ██║██╔██╗██║" << endl;
    cout << " ╚═══██╗  ╚██╔╝  ██║  ██╗██╔══██╗██║  ██║██║╚████║██║ ╚═══██╗██╔══██║   ██║   ██║██║  ██║██║╚████║" << endl;
    cout << "██████╔╝   ██║   ╚█████╔╝██║  ██║╚█████╔╝██║ ╚███║██║██████╔╝██║  ██║   ██║   ██║╚█████╔╝██║ ╚███║" << endl;
    cout << "╚═════╝    ╚═╝    ╚════╝ ╚═╝  ╚═╝ ╚════╝ ╚═╝  ╚══╝╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚════╝ ╚═╝  ╚══╝" << endl;
    cout << RESET;
    j=1 <<16;
    for (size_t i = 0; i < 5; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    
}
void disk_animations(){
    long int j=1 <<16;
    for (size_t i = 0; i < 6; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
    cout << endl << BOLDCYAN;
    cout << "██████╗ ██╗ ██████╗██╗  ██╗" << endl;
    cout << "██╔══██╗██║██╔════╝██║ ██╔╝" << endl;
    cout << "██║  ██║██║╚█████╗ █████═╝ " << endl;
    cout << "██║  ██║██║ ╚═══██╗██╔═██╗ " << endl;
    cout << "██████╔╝██║██████╔╝██║ ╚██╗" << endl;
    cout << "╚═════╝ ╚═╝╚═════╝ ╚═╝  ╚═╝" << endl;
    cout << endl;
    cout << " ██████╗ █████╗ ██╗  ██╗███████╗██████╗ ██╗   ██╗██╗     ██╗███╗  ██╗ ██████╗" << endl;
    cout << "██╔════╝██╔══██╗██║  ██║██╔════╝██╔══██╗██║   ██║██║     ██║████╗ ██║██╔════╝" << endl;
    cout << "╚█████╗ ██║  ╚═╝███████║█████╗  ██║  ██║██║   ██║██║     ██║██╔██╗██║██║  ███╗" << endl;
    cout << " ╚═══██╗██║  ██╗██╔══██║██╔══╝  ██║  ██║██║   ██║██║     ██║██║╚████║██║  ╚██╗" << endl;
    cout << "██████╔╝╚█████╔╝██║  ██║███████╗██████╔╝╚██████╔╝███████╗██║██║ ╚███║╚██████╔╝" << endl;
    cout << "╚═════╝  ╚════╝ ╚═╝  ╚═╝╚══════╝╚═════╝  ╚═════╝ ╚══════╝╚═╝╚═╝  ╚══╝ ╚═════╝" << endl << RESET;
    j=1 <<16;
    for (size_t i = 0; i < 7; i++){
        usleep(j); // move faster and faster,
        j = (int)(j * 0.9); // so sleep less each time
        cout << endl;
    }
}